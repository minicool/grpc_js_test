/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.RFIDDevice.AssertsList', null, global);
goog.exportSymbol('proto.RFIDDevice.AssertsListUpdate', null, global);
goog.exportSymbol('proto.RFIDDevice.AssetSunfo', null, global);
goog.exportSymbol('proto.RFIDDevice.AssetsStatesInfo', null, global);
goog.exportSymbol('proto.RFIDDevice.ERRORCODE', null, global);
goog.exportSymbol('proto.RFIDDevice.ErrorMessage', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_assertsList_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_assertsList_request', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_assetsInfo_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_assetsInfo_request', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_stockList_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_stockList_request', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_terminal_info_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Get_terminal_info_request', null, global);
goog.exportSymbol('proto.RFIDDevice.Modify_assetsInfo_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Modify_assetsInfo_request', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDSTATETYPE', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDcard_writeData_Request', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDcard_writeData_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDprint_writeData_Request', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDprint_writeData_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDread_writeData_Request', null, global);
goog.exportSymbol('proto.RFIDDevice.RFIDread_writeData_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.StockInfo', null, global);
goog.exportSymbol('proto.RFIDDevice.Update_assetsList_reply', null, global);
goog.exportSymbol('proto.RFIDDevice.Update_assetsList_request', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.ErrorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.ErrorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.ErrorMessage.displayName = 'proto.RFIDDevice.ErrorMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.ErrorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.ErrorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.ErrorMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.ErrorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errormsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.ErrorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.ErrorMessage;
  return proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.ErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.RFIDDevice.ERRORCODE} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.ErrorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.ErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ERRORCODE errorCode = 1;
 * @return {!proto.RFIDDevice.ERRORCODE}
 */
proto.RFIDDevice.ErrorMessage.prototype.getErrorcode = function() {
  return /** @type {!proto.RFIDDevice.ERRORCODE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.RFIDDevice.ERRORCODE} value */
proto.RFIDDevice.ErrorMessage.prototype.setErrorcode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string errorMsg = 2;
 * @return {string}
 */
proto.RFIDDevice.ErrorMessage.prototype.getErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.ErrorMessage.prototype.setErrormsg = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDcard_writeData_Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.RFIDcard_writeData_Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDcard_writeData_Request.displayName = 'proto.RFIDDevice.RFIDcard_writeData_Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDcard_writeData_Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDcard_writeData_Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDcard_writeData_Request}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDcard_writeData_Request;
  return proto.RFIDDevice.RFIDcard_writeData_Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDcard_writeData_Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDcard_writeData_Request}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDcard_writeData_Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDcard_writeData_Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDcard_writeData_Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetsName = 2;
 * @return {string}
 */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDcard_writeData_Request.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDcard_writeData_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.RFIDcard_writeData_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDcard_writeData_reply.displayName = 'proto.RFIDDevice.RFIDcard_writeData_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDcard_writeData_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDcard_writeData_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsgloballd: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDcard_writeData_reply}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDcard_writeData_reply;
  return proto.RFIDDevice.RFIDcard_writeData_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDcard_writeData_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDcard_writeData_reply}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsgloballd(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDcard_writeData_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDcard_writeData_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDcard_writeData_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsgloballd();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assetsGloballd = 1;
 * @return {string}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.getAssetsgloballd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.setAssetsgloballd = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ErrorMessage errormsg = 3;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 3));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RFIDDevice.RFIDcard_writeData_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.RFIDcard_writeData_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDprint_writeData_Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.RFIDprint_writeData_Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDprint_writeData_Request.displayName = 'proto.RFIDDevice.RFIDprint_writeData_Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDprint_writeData_Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDprint_writeData_Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    companyname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devpementnmae: jspb.Message.getFieldWithDefault(msg, 3, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    assetstype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    assetsmodel: jspb.Message.getFieldWithDefault(msg, 6, ""),
    url: jspb.Message.getFieldWithDefault(msg, 7, ""),
    date: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDprint_writeData_Request}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDprint_writeData_Request;
  return proto.RFIDDevice.RFIDprint_writeData_Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDprint_writeData_Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDprint_writeData_Request}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevpementnmae(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetstype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsmodel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDprint_writeData_Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDprint_writeData_Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDprint_writeData_Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompanyname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevpementnmae();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAssetstype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAssetsmodel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string companyName = 2;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getCompanyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setCompanyname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string devpementNmae = 3;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getDevpementnmae = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setDevpementnmae = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string assetsName = 4;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string assetsType = 5;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getAssetstype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setAssetstype = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string assetsModel = 6;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getAssetsmodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setAssetsmodel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string url = 7;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string date = 8;
 * @return {string}
 */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDprint_writeData_Request.prototype.setDate = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDprint_writeData_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.RFIDprint_writeData_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDprint_writeData_reply.displayName = 'proto.RFIDDevice.RFIDprint_writeData_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDprint_writeData_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDprint_writeData_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDprint_writeData_reply}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDprint_writeData_reply;
  return proto.RFIDDevice.RFIDprint_writeData_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDprint_writeData_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDprint_writeData_reply}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDprint_writeData_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDprint_writeData_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDprint_writeData_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorMessage errormsg = 2;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 2));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RFIDDevice.RFIDprint_writeData_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.RFIDprint_writeData_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.AssetSunfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.AssetSunfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.AssetSunfo.displayName = 'proto.RFIDDevice.AssetSunfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.AssetSunfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.AssetSunfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.AssetSunfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.AssetSunfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.AssetSunfo}
 */
proto.RFIDDevice.AssetSunfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.AssetSunfo;
  return proto.RFIDDevice.AssetSunfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.AssetSunfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.AssetSunfo}
 */
proto.RFIDDevice.AssetSunfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.AssetSunfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.AssetSunfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.AssetSunfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.AssetSunfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.AssetSunfo.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssetSunfo.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetsName = 2;
 * @return {string}
 */
proto.RFIDDevice.AssetSunfo.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssetSunfo.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDread_writeData_Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RFIDDevice.RFIDread_writeData_Request.repeatedFields_, null);
};
goog.inherits(proto.RFIDDevice.RFIDread_writeData_Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDread_writeData_Request.displayName = 'proto.RFIDDevice.RFIDread_writeData_Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RFIDDevice.RFIDread_writeData_Request.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDread_writeData_Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDread_writeData_Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDread_writeData_Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsinfoList: jspb.Message.toObjectList(msg.getAssetsinfoList(),
    proto.RFIDDevice.AssetSunfo.toObject, includeInstance),
    checkname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDread_writeData_Request}
 */
proto.RFIDDevice.RFIDread_writeData_Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDread_writeData_Request;
  return proto.RFIDDevice.RFIDread_writeData_Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDread_writeData_Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDread_writeData_Request}
 */
proto.RFIDDevice.RFIDread_writeData_Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RFIDDevice.AssetSunfo;
      reader.readMessage(value,proto.RFIDDevice.AssetSunfo.deserializeBinaryFromReader);
      msg.addAssetsinfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDread_writeData_Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDread_writeData_Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDread_writeData_Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RFIDDevice.AssetSunfo.serializeBinaryToWriter
    );
  }
  f = message.getCheckname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated AssetSunfo assetsInfo = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RFIDDevice.AssetSunfo>}
 */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.getAssetsinfoList = function() {
  return /** @type{!Array.<!proto.RFIDDevice.AssetSunfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RFIDDevice.AssetSunfo, 1));
};


/** @param {!Array.<!proto.RFIDDevice.AssetSunfo>} value */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.setAssetsinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RFIDDevice.AssetSunfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RFIDDevice.AssetSunfo}
 */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.addAssetsinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RFIDDevice.AssetSunfo, opt_index);
};


proto.RFIDDevice.RFIDread_writeData_Request.prototype.clearAssetsinfoList = function() {
  this.setAssetsinfoList([]);
};


/**
 * optional string checkName = 2;
 * @return {string}
 */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.getCheckname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.RFIDread_writeData_Request.prototype.setCheckname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.RFIDread_writeData_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.RFIDread_writeData_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.RFIDread_writeData_reply.displayName = 'proto.RFIDDevice.RFIDread_writeData_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.RFIDread_writeData_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.RFIDread_writeData_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.RFIDread_writeData_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.RFIDread_writeData_reply}
 */
proto.RFIDDevice.RFIDread_writeData_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.RFIDread_writeData_reply;
  return proto.RFIDDevice.RFIDread_writeData_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.RFIDread_writeData_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.RFIDread_writeData_reply}
 */
proto.RFIDDevice.RFIDread_writeData_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.RFIDread_writeData_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.RFIDread_writeData_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.RFIDread_writeData_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorMessage errormsg = 2;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 2));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RFIDDevice.RFIDread_writeData_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.RFIDread_writeData_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.AssetsStatesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.AssetsStatesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.AssetsStatesInfo.displayName = 'proto.RFIDDevice.AssetsStatesInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.AssetsStatesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.AssetsStatesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.AssetsStatesInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.AssetsStatesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    statesIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statesName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.AssetsStatesInfo}
 */
proto.RFIDDevice.AssetsStatesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.AssetsStatesInfo;
  return proto.RFIDDevice.AssetsStatesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.AssetsStatesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.AssetsStatesInfo}
 */
proto.RFIDDevice.AssetsStatesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatesIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatesName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.AssetsStatesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.AssetsStatesInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.AssetsStatesInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.AssetsStatesInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatesIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatesName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 states_index = 1;
 * @return {number}
 */
proto.RFIDDevice.AssetsStatesInfo.prototype.getStatesIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RFIDDevice.AssetsStatesInfo.prototype.setStatesIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string states_name = 2;
 * @return {string}
 */
proto.RFIDDevice.AssetsStatesInfo.prototype.getStatesName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssetsStatesInfo.prototype.setStatesName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_assetsInfo_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Get_assetsInfo_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_assetsInfo_request.displayName = 'proto.RFIDDevice.Get_assetsInfo_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_assetsInfo_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_assetsInfo_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_assetsInfo_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_assetsInfo_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_assetsInfo_request}
 */
proto.RFIDDevice.Get_assetsInfo_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_assetsInfo_request;
  return proto.RFIDDevice.Get_assetsInfo_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_assetsInfo_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_assetsInfo_request}
 */
proto.RFIDDevice.Get_assetsInfo_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_assetsInfo_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_assetsInfo_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_assetsInfo_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_assetsInfo_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_request.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_request.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_assetsInfo_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RFIDDevice.Get_assetsInfo_reply.repeatedFields_, null);
};
goog.inherits(proto.RFIDDevice.Get_assetsInfo_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_assetsInfo_reply.displayName = 'proto.RFIDDevice.Get_assetsInfo_reply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RFIDDevice.Get_assetsInfo_reply.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_assetsInfo_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_assetsInfo_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_assetsInfo_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    companyname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devpementnmae: jspb.Message.getFieldWithDefault(msg, 3, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    assetstype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    assetsmodel: jspb.Message.getFieldWithDefault(msg, 6, ""),
    url: jspb.Message.getFieldWithDefault(msg, 7, ""),
    date: jspb.Message.getFieldWithDefault(msg, 8, ""),
    assetsStatesInfoCurent: (f = msg.getAssetsStatesInfoCurent()) && proto.RFIDDevice.AssetsStatesInfo.toObject(includeInstance, f),
    assetsStatesInfoListList: jspb.Message.toObjectList(msg.getAssetsStatesInfoListList(),
    proto.RFIDDevice.AssetsStatesInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_assetsInfo_reply}
 */
proto.RFIDDevice.Get_assetsInfo_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_assetsInfo_reply;
  return proto.RFIDDevice.Get_assetsInfo_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_assetsInfo_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_assetsInfo_reply}
 */
proto.RFIDDevice.Get_assetsInfo_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevpementnmae(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetstype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsmodel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 9:
      var value = new proto.RFIDDevice.AssetsStatesInfo;
      reader.readMessage(value,proto.RFIDDevice.AssetsStatesInfo.deserializeBinaryFromReader);
      msg.setAssetsStatesInfoCurent(value);
      break;
    case 10:
      var value = new proto.RFIDDevice.AssetsStatesInfo;
      reader.readMessage(value,proto.RFIDDevice.AssetsStatesInfo.deserializeBinaryFromReader);
      msg.addAssetsStatesInfoList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_assetsInfo_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_assetsInfo_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_assetsInfo_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompanyname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevpementnmae();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAssetstype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAssetsmodel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAssetsStatesInfoCurent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.RFIDDevice.AssetsStatesInfo.serializeBinaryToWriter
    );
  }
  f = message.getAssetsStatesInfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.RFIDDevice.AssetsStatesInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string companyName = 2;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getCompanyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setCompanyname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string devpementNmae = 3;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getDevpementnmae = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setDevpementnmae = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string assetsName = 4;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string assetsType = 5;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetstype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetstype = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string assetsModel = 6;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetsmodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetsmodel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string url = 7;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string date = 8;
 * @return {string}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setDate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional AssetsStatesInfo assets_states_info_curent = 9;
 * @return {?proto.RFIDDevice.AssetsStatesInfo}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetsStatesInfoCurent = function() {
  return /** @type{?proto.RFIDDevice.AssetsStatesInfo} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.AssetsStatesInfo, 9));
};


/** @param {?proto.RFIDDevice.AssetsStatesInfo|undefined} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetsStatesInfoCurent = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.RFIDDevice.Get_assetsInfo_reply.prototype.clearAssetsStatesInfoCurent = function() {
  this.setAssetsStatesInfoCurent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.hasAssetsStatesInfoCurent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated AssetsStatesInfo assets_states_info_list = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RFIDDevice.AssetsStatesInfo>}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.getAssetsStatesInfoListList = function() {
  return /** @type{!Array.<!proto.RFIDDevice.AssetsStatesInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RFIDDevice.AssetsStatesInfo, 10));
};


/** @param {!Array.<!proto.RFIDDevice.AssetsStatesInfo>} value */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.setAssetsStatesInfoListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.RFIDDevice.AssetsStatesInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RFIDDevice.AssetsStatesInfo}
 */
proto.RFIDDevice.Get_assetsInfo_reply.prototype.addAssetsStatesInfoList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.RFIDDevice.AssetsStatesInfo, opt_index);
};


proto.RFIDDevice.Get_assetsInfo_reply.prototype.clearAssetsStatesInfoListList = function() {
  this.setAssetsStatesInfoListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Modify_assetsInfo_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Modify_assetsInfo_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Modify_assetsInfo_request.displayName = 'proto.RFIDDevice.Modify_assetsInfo_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Modify_assetsInfo_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Modify_assetsInfo_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Modify_assetsInfo_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    assetsStatesInfoCurent: (f = msg.getAssetsStatesInfoCurent()) && proto.RFIDDevice.AssetsStatesInfo.toObject(includeInstance, f),
    terminalid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Modify_assetsInfo_request}
 */
proto.RFIDDevice.Modify_assetsInfo_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Modify_assetsInfo_request;
  return proto.RFIDDevice.Modify_assetsInfo_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Modify_assetsInfo_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Modify_assetsInfo_request}
 */
proto.RFIDDevice.Modify_assetsInfo_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    case 3:
      var value = /** @type {!proto.RFIDDevice.RFIDSTATETYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.RFIDDevice.AssetsStatesInfo;
      reader.readMessage(value,proto.RFIDDevice.AssetsStatesInfo.deserializeBinaryFromReader);
      msg.setAssetsStatesInfoCurent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Modify_assetsInfo_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Modify_assetsInfo_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Modify_assetsInfo_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAssetsStatesInfoCurent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RFIDDevice.AssetsStatesInfo.serializeBinaryToWriter
    );
  }
  f = message.getTerminalid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetsName = 2;
 * @return {string}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional RFIDSTATETYPE type = 3;
 * @return {!proto.RFIDDevice.RFIDSTATETYPE}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.getType = function() {
  return /** @type {!proto.RFIDDevice.RFIDSTATETYPE} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.RFIDDevice.RFIDSTATETYPE} value */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional AssetsStatesInfo assets_states_info_curent = 4;
 * @return {?proto.RFIDDevice.AssetsStatesInfo}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.getAssetsStatesInfoCurent = function() {
  return /** @type{?proto.RFIDDevice.AssetsStatesInfo} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.AssetsStatesInfo, 4));
};


/** @param {?proto.RFIDDevice.AssetsStatesInfo|undefined} value */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.setAssetsStatesInfoCurent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.RFIDDevice.Modify_assetsInfo_request.prototype.clearAssetsStatesInfoCurent = function() {
  this.setAssetsStatesInfoCurent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.hasAssetsStatesInfoCurent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string terminalId = 5;
 * @return {string}
 */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.getTerminalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.RFIDDevice.Modify_assetsInfo_request.prototype.setTerminalid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Modify_assetsInfo_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Modify_assetsInfo_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Modify_assetsInfo_reply.displayName = 'proto.RFIDDevice.Modify_assetsInfo_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Modify_assetsInfo_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Modify_assetsInfo_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Modify_assetsInfo_reply}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Modify_assetsInfo_reply;
  return proto.RFIDDevice.Modify_assetsInfo_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Modify_assetsInfo_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Modify_assetsInfo_reply}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Modify_assetsInfo_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Modify_assetsInfo_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Modify_assetsInfo_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorMessage errormsg = 2;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 2));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RFIDDevice.Modify_assetsInfo_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Modify_assetsInfo_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.StockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.StockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.StockInfo.displayName = 'proto.RFIDDevice.StockInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.StockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.StockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.StockInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.StockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stockid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stockname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stockdate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stockusername: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.StockInfo}
 */
proto.RFIDDevice.StockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.StockInfo;
  return proto.RFIDDevice.StockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.StockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.StockInfo}
 */
proto.RFIDDevice.StockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockdate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockusername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.StockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.StockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.StockInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.StockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStockid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStockname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStockdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStockusername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string stockId = 1;
 * @return {string}
 */
proto.RFIDDevice.StockInfo.prototype.getStockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.StockInfo.prototype.setStockid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string stockName = 2;
 * @return {string}
 */
proto.RFIDDevice.StockInfo.prototype.getStockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.StockInfo.prototype.setStockname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string stockDate = 3;
 * @return {string}
 */
proto.RFIDDevice.StockInfo.prototype.getStockdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RFIDDevice.StockInfo.prototype.setStockdate = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string stockUserName = 4;
 * @return {string}
 */
proto.RFIDDevice.StockInfo.prototype.getStockusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RFIDDevice.StockInfo.prototype.setStockusername = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_stockList_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Get_stockList_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_stockList_request.displayName = 'proto.RFIDDevice.Get_stockList_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_stockList_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_stockList_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_stockList_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_stockList_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_stockList_request}
 */
proto.RFIDDevice.Get_stockList_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_stockList_request;
  return proto.RFIDDevice.Get_stockList_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_stockList_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_stockList_request}
 */
proto.RFIDDevice.Get_stockList_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_stockList_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_stockList_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_stockList_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_stockList_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string terminalId = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_stockList_request.prototype.getTerminalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_stockList_request.prototype.setTerminalid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_stockList_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RFIDDevice.Get_stockList_reply.repeatedFields_, null);
};
goog.inherits(proto.RFIDDevice.Get_stockList_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_stockList_reply.displayName = 'proto.RFIDDevice.Get_stockList_reply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RFIDDevice.Get_stockList_reply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_stockList_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_stockList_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_stockList_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    stockinfoList: jspb.Message.toObjectList(msg.getStockinfoList(),
    proto.RFIDDevice.StockInfo.toObject, includeInstance),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_stockList_reply}
 */
proto.RFIDDevice.Get_stockList_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_stockList_reply;
  return proto.RFIDDevice.Get_stockList_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_stockList_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_stockList_reply}
 */
proto.RFIDDevice.Get_stockList_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RFIDDevice.StockInfo;
      reader.readMessage(value,proto.RFIDDevice.StockInfo.deserializeBinaryFromReader);
      msg.addStockinfo(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_stockList_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_stockList_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_stockList_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStockinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RFIDDevice.StockInfo.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StockInfo stockInfo = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RFIDDevice.StockInfo>}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.getStockinfoList = function() {
  return /** @type{!Array.<!proto.RFIDDevice.StockInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RFIDDevice.StockInfo, 1));
};


/** @param {!Array.<!proto.RFIDDevice.StockInfo>} value */
proto.RFIDDevice.Get_stockList_reply.prototype.setStockinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RFIDDevice.StockInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RFIDDevice.StockInfo}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.addStockinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RFIDDevice.StockInfo, opt_index);
};


proto.RFIDDevice.Get_stockList_reply.prototype.clearStockinfoList = function() {
  this.setStockinfoList([]);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.RFIDDevice.Get_stockList_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ErrorMessage errormsg = 3;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 3));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.Get_stockList_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RFIDDevice.Get_stockList_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Get_stockList_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.AssertsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.AssertsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.AssertsList.displayName = 'proto.RFIDDevice.AssertsList';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.AssertsList.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.AssertsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.AssertsList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.AssertsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetsname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    placelocation: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.AssertsList}
 */
proto.RFIDDevice.AssertsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.AssertsList;
  return proto.RFIDDevice.AssertsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.AssertsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.AssertsList}
 */
proto.RFIDDevice.AssertsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetsname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlacelocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.AssertsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.AssertsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.AssertsList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.AssertsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetsname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlacelocation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string assetsId = 1;
 * @return {string}
 */
proto.RFIDDevice.AssertsList.prototype.getAssetsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssertsList.prototype.setAssetsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetsName = 2;
 * @return {string}
 */
proto.RFIDDevice.AssertsList.prototype.getAssetsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssertsList.prototype.setAssetsname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string placeLocation = 3;
 * @return {string}
 */
proto.RFIDDevice.AssertsList.prototype.getPlacelocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssertsList.prototype.setPlacelocation = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_assertsList_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Get_assertsList_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_assertsList_request.displayName = 'proto.RFIDDevice.Get_assertsList_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_assertsList_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_assertsList_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_assertsList_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_assertsList_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stockid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_assertsList_request}
 */
proto.RFIDDevice.Get_assertsList_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_assertsList_request;
  return proto.RFIDDevice.Get_assertsList_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_assertsList_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_assertsList_request}
 */
proto.RFIDDevice.Get_assertsList_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_assertsList_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_assertsList_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_assertsList_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_assertsList_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string terminalId = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_assertsList_request.prototype.getTerminalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assertsList_request.prototype.setTerminalid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string stockId = 2;
 * @return {string}
 */
proto.RFIDDevice.Get_assertsList_request.prototype.getStockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_assertsList_request.prototype.setStockid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_assertsList_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RFIDDevice.Get_assertsList_reply.repeatedFields_, null);
};
goog.inherits(proto.RFIDDevice.Get_assertsList_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_assertsList_reply.displayName = 'proto.RFIDDevice.Get_assertsList_reply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RFIDDevice.Get_assertsList_reply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_assertsList_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_assertsList_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_assertsList_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    assertlistList: jspb.Message.toObjectList(msg.getAssertlistList(),
    proto.RFIDDevice.AssertsList.toObject, includeInstance),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_assertsList_reply}
 */
proto.RFIDDevice.Get_assertsList_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_assertsList_reply;
  return proto.RFIDDevice.Get_assertsList_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_assertsList_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_assertsList_reply}
 */
proto.RFIDDevice.Get_assertsList_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RFIDDevice.AssertsList;
      reader.readMessage(value,proto.RFIDDevice.AssertsList.deserializeBinaryFromReader);
      msg.addAssertlist(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_assertsList_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_assertsList_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_assertsList_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssertlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RFIDDevice.AssertsList.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssertsList assertlist = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RFIDDevice.AssertsList>}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.getAssertlistList = function() {
  return /** @type{!Array.<!proto.RFIDDevice.AssertsList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RFIDDevice.AssertsList, 1));
};


/** @param {!Array.<!proto.RFIDDevice.AssertsList>} value */
proto.RFIDDevice.Get_assertsList_reply.prototype.setAssertlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RFIDDevice.AssertsList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RFIDDevice.AssertsList}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.addAssertlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RFIDDevice.AssertsList, opt_index);
};


proto.RFIDDevice.Get_assertsList_reply.prototype.clearAssertlistList = function() {
  this.setAssertlistList([]);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.RFIDDevice.Get_assertsList_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ErrorMessage errormsg = 3;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 3));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.Get_assertsList_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RFIDDevice.Get_assertsList_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Get_assertsList_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.AssertsListUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.AssertsListUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.AssertsListUpdate.displayName = 'proto.RFIDDevice.AssertsListUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.AssertsListUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.AssertsListUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.AssertsListUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.AssertsListUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    assertsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isstock: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.AssertsListUpdate}
 */
proto.RFIDDevice.AssertsListUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.AssertsListUpdate;
  return proto.RFIDDevice.AssertsListUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.AssertsListUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.AssertsListUpdate}
 */
proto.RFIDDevice.AssertsListUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssertsid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.AssertsListUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.AssertsListUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.AssertsListUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.AssertsListUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssertsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsstock();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string assertsId = 1;
 * @return {string}
 */
proto.RFIDDevice.AssertsListUpdate.prototype.getAssertsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.AssertsListUpdate.prototype.setAssertsid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool isStock = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.AssertsListUpdate.prototype.getIsstock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.RFIDDevice.AssertsListUpdate.prototype.setIsstock = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Update_assetsList_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RFIDDevice.Update_assetsList_request.repeatedFields_, null);
};
goog.inherits(proto.RFIDDevice.Update_assetsList_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Update_assetsList_request.displayName = 'proto.RFIDDevice.Update_assetsList_request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RFIDDevice.Update_assetsList_request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Update_assetsList_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Update_assetsList_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Update_assetsList_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stockid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updateList: jspb.Message.toObjectList(msg.getUpdateList(),
    proto.RFIDDevice.AssertsListUpdate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Update_assetsList_request}
 */
proto.RFIDDevice.Update_assetsList_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Update_assetsList_request;
  return proto.RFIDDevice.Update_assetsList_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Update_assetsList_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Update_assetsList_request}
 */
proto.RFIDDevice.Update_assetsList_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockid(value);
      break;
    case 3:
      var value = new proto.RFIDDevice.AssertsListUpdate;
      reader.readMessage(value,proto.RFIDDevice.AssertsListUpdate.deserializeBinaryFromReader);
      msg.addUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Update_assetsList_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Update_assetsList_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Update_assetsList_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStockid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.RFIDDevice.AssertsListUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string terminalId = 1;
 * @return {string}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.getTerminalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Update_assetsList_request.prototype.setTerminalid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string stockId = 2;
 * @return {string}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.getStockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RFIDDevice.Update_assetsList_request.prototype.setStockid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated AssertsListUpdate update = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RFIDDevice.AssertsListUpdate>}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.getUpdateList = function() {
  return /** @type{!Array.<!proto.RFIDDevice.AssertsListUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RFIDDevice.AssertsListUpdate, 3));
};


/** @param {!Array.<!proto.RFIDDevice.AssertsListUpdate>} value */
proto.RFIDDevice.Update_assetsList_request.prototype.setUpdateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.RFIDDevice.AssertsListUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RFIDDevice.AssertsListUpdate}
 */
proto.RFIDDevice.Update_assetsList_request.prototype.addUpdate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.RFIDDevice.AssertsListUpdate, opt_index);
};


proto.RFIDDevice.Update_assetsList_request.prototype.clearUpdateList = function() {
  this.setUpdateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Update_assetsList_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Update_assetsList_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Update_assetsList_reply.displayName = 'proto.RFIDDevice.Update_assetsList_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Update_assetsList_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Update_assetsList_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Update_assetsList_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Update_assetsList_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errormsg: (f = msg.getErrormsg()) && proto.RFIDDevice.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Update_assetsList_reply}
 */
proto.RFIDDevice.Update_assetsList_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Update_assetsList_reply;
  return proto.RFIDDevice.Update_assetsList_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Update_assetsList_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Update_assetsList_reply}
 */
proto.RFIDDevice.Update_assetsList_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.RFIDDevice.ErrorMessage;
      reader.readMessage(value,proto.RFIDDevice.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Update_assetsList_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Update_assetsList_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Update_assetsList_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Update_assetsList_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RFIDDevice.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.RFIDDevice.Update_assetsList_reply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.RFIDDevice.Update_assetsList_reply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorMessage errormsg = 2;
 * @return {?proto.RFIDDevice.ErrorMessage}
 */
proto.RFIDDevice.Update_assetsList_reply.prototype.getErrormsg = function() {
  return /** @type{?proto.RFIDDevice.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.RFIDDevice.ErrorMessage, 2));
};


/** @param {?proto.RFIDDevice.ErrorMessage|undefined} value */
proto.RFIDDevice.Update_assetsList_reply.prototype.setErrormsg = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RFIDDevice.Update_assetsList_reply.prototype.clearErrormsg = function() {
  this.setErrormsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RFIDDevice.Update_assetsList_reply.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_terminal_info_request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Get_terminal_info_request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_terminal_info_request.displayName = 'proto.RFIDDevice.Get_terminal_info_request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_terminal_info_request.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_terminal_info_request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_terminal_info_request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_terminal_info_request.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_terminal_info_request}
 */
proto.RFIDDevice.Get_terminal_info_request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_terminal_info_request;
  return proto.RFIDDevice.Get_terminal_info_request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_terminal_info_request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_terminal_info_request}
 */
proto.RFIDDevice.Get_terminal_info_request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_terminal_info_request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_terminal_info_request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_terminal_info_request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_terminal_info_request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string terminalId = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_terminal_info_request.prototype.getTerminalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_terminal_info_request.prototype.setTerminalid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RFIDDevice.Get_terminal_info_reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RFIDDevice.Get_terminal_info_reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RFIDDevice.Get_terminal_info_reply.displayName = 'proto.RFIDDevice.Get_terminal_info_reply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RFIDDevice.Get_terminal_info_reply.prototype.toObject = function(opt_includeInstance) {
  return proto.RFIDDevice.Get_terminal_info_reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RFIDDevice.Get_terminal_info_reply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RFIDDevice.Get_terminal_info_reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminalName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RFIDDevice.Get_terminal_info_reply}
 */
proto.RFIDDevice.Get_terminal_info_reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RFIDDevice.Get_terminal_info_reply;
  return proto.RFIDDevice.Get_terminal_info_reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RFIDDevice.Get_terminal_info_reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RFIDDevice.Get_terminal_info_reply}
 */
proto.RFIDDevice.Get_terminal_info_reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminalName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RFIDDevice.Get_terminal_info_reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RFIDDevice.Get_terminal_info_reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RFIDDevice.Get_terminal_info_reply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RFIDDevice.Get_terminal_info_reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminalName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string terminal_name = 1;
 * @return {string}
 */
proto.RFIDDevice.Get_terminal_info_reply.prototype.getTerminalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RFIDDevice.Get_terminal_info_reply.prototype.setTerminalName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.RFIDDevice.ERRORCODE = {
  ERRORCODE_NONE: 0,
  EXCUTION_ERROR: 1001,
  ACCESS_FAILURE: 1002,
  SYSTEM_BUSY: 1003,
  FAILED_CONNECT_RFIDCARD: 1004,
  FAILED_CONNECT_RFIDCARDER: 1005,
  FAILED_CONNECT_RFIDPRINTER: 1006
};

/**
 * @enum {number}
 */
proto.RFIDDevice.RFIDSTATETYPE = {
  RFID_NONE: 0,
  RFID_IN: 1,
  RFID_OUT: 2
};

goog.object.extend(exports, proto.RFIDDevice);
